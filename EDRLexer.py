# Generated from EDR.g by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,308,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,3,13,140,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,197,8,13,1,
        13,3,13,200,8,13,1,14,4,14,203,8,14,11,14,12,14,204,1,15,5,15,208,
        8,15,10,15,12,15,211,9,15,1,15,4,15,214,8,15,11,15,12,15,215,1,15,
        5,15,219,8,15,10,15,12,15,222,9,15,1,15,5,15,225,8,15,10,15,12,15,
        228,9,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,236,8,15,10,15,12,15,
        239,9,15,1,15,5,15,242,8,15,10,15,12,15,245,9,15,1,15,1,15,1,15,
        1,15,1,15,1,15,5,15,253,8,15,10,15,12,15,256,9,15,3,15,258,8,15,
        1,16,1,16,1,17,4,17,263,8,17,11,17,12,17,264,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,3,18,276,8,18,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,3,19,287,8,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        1,0,6,2,0,65,90,97,122,2,0,9,9,32,32,1,0,32,32,2,0,10,10,13,13,2,
        0,44,44,46,46,1,0,48,57,369,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,
        47,1,0,0,0,5,49,1,0,0,0,7,51,1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,
        13,57,1,0,0,0,15,59,1,0,0,0,17,61,1,0,0,0,19,63,1,0,0,0,21,65,1,
        0,0,0,23,72,1,0,0,0,25,79,1,0,0,0,27,199,1,0,0,0,29,202,1,0,0,0,
        31,257,1,0,0,0,33,259,1,0,0,0,35,262,1,0,0,0,37,275,1,0,0,0,39,286,
        1,0,0,0,41,288,1,0,0,0,43,298,1,0,0,0,45,46,5,40,0,0,46,2,1,0,0,
        0,47,48,5,41,0,0,48,4,1,0,0,0,49,50,5,91,0,0,50,6,1,0,0,0,51,52,
        5,93,0,0,52,8,1,0,0,0,53,54,5,123,0,0,54,10,1,0,0,0,55,56,5,125,
        0,0,56,12,1,0,0,0,57,58,5,58,0,0,58,14,1,0,0,0,59,60,5,63,0,0,60,
        16,1,0,0,0,61,62,5,45,0,0,62,18,1,0,0,0,63,64,5,43,0,0,64,20,1,0,
        0,0,65,66,5,38,0,0,66,67,5,35,0,0,67,68,5,56,0,0,68,69,5,49,0,0,
        69,70,5,56,0,0,70,71,5,59,0,0,71,22,1,0,0,0,72,73,5,38,0,0,73,74,
        5,35,0,0,74,75,5,55,0,0,75,76,5,55,0,0,76,77,5,48,0,0,77,78,5,59,
        0,0,78,24,1,0,0,0,79,80,5,38,0,0,80,81,5,35,0,0,81,82,5,56,0,0,82,
        83,5,48,0,0,83,84,5,51,0,0,84,85,5,59,0,0,85,26,1,0,0,0,86,200,7,
        0,0,0,87,88,5,38,0,0,88,89,5,35,0,0,89,90,5,57,0,0,90,139,1,0,0,
        0,91,92,5,49,0,0,92,140,5,51,0,0,93,94,5,49,0,0,94,140,5,52,0,0,
        95,96,5,49,0,0,96,140,5,53,0,0,97,98,5,49,0,0,98,140,5,54,0,0,99,
        100,5,49,0,0,100,140,5,55,0,0,101,102,5,49,0,0,102,140,5,56,0,0,
        103,104,5,49,0,0,104,140,5,57,0,0,105,106,5,50,0,0,106,140,5,48,
        0,0,107,108,5,50,0,0,108,140,5,49,0,0,109,110,5,50,0,0,110,140,5,
        50,0,0,111,112,5,50,0,0,112,140,5,51,0,0,113,114,5,50,0,0,114,140,
        5,52,0,0,115,116,5,50,0,0,116,140,5,53,0,0,117,118,5,50,0,0,118,
        140,5,54,0,0,119,120,5,50,0,0,120,140,5,55,0,0,121,122,5,50,0,0,
        122,140,5,56,0,0,123,124,5,50,0,0,124,140,5,57,0,0,125,126,5,51,
        0,0,126,140,5,49,0,0,127,128,5,51,0,0,128,140,5,50,0,0,129,130,5,
        51,0,0,130,140,5,51,0,0,131,132,5,51,0,0,132,140,5,52,0,0,133,134,
        5,51,0,0,134,140,5,53,0,0,135,136,5,51,0,0,136,140,5,54,0,0,137,
        138,5,51,0,0,138,140,5,55,0,0,139,91,1,0,0,0,139,93,1,0,0,0,139,
        95,1,0,0,0,139,97,1,0,0,0,139,99,1,0,0,0,139,101,1,0,0,0,139,103,
        1,0,0,0,139,105,1,0,0,0,139,107,1,0,0,0,139,109,1,0,0,0,139,111,
        1,0,0,0,139,113,1,0,0,0,139,115,1,0,0,0,139,117,1,0,0,0,139,119,
        1,0,0,0,139,121,1,0,0,0,139,123,1,0,0,0,139,125,1,0,0,0,139,127,
        1,0,0,0,139,129,1,0,0,0,139,131,1,0,0,0,139,133,1,0,0,0,139,135,
        1,0,0,0,139,137,1,0,0,0,140,141,1,0,0,0,141,200,5,59,0,0,142,143,
        5,38,0,0,143,144,5,35,0,0,144,145,5,57,0,0,145,196,1,0,0,0,146,147,
        5,52,0,0,147,197,5,53,0,0,148,149,5,52,0,0,149,197,5,54,0,0,150,
        151,5,52,0,0,151,197,5,55,0,0,152,153,5,52,0,0,153,197,5,56,0,0,
        154,155,5,52,0,0,155,197,5,57,0,0,156,157,5,53,0,0,157,197,5,48,
        0,0,158,159,5,53,0,0,159,197,5,49,0,0,160,161,5,53,0,0,161,197,5,
        50,0,0,162,163,5,53,0,0,163,197,5,51,0,0,164,165,5,53,0,0,165,197,
        5,52,0,0,166,167,5,53,0,0,167,197,5,53,0,0,168,169,5,53,0,0,169,
        197,5,54,0,0,170,171,5,53,0,0,171,197,5,55,0,0,172,173,5,53,0,0,
        173,197,5,56,0,0,174,175,5,53,0,0,175,197,5,57,0,0,176,177,5,54,
        0,0,177,197,5,48,0,0,178,179,5,54,0,0,179,197,5,49,0,0,180,181,5,
        54,0,0,181,197,5,50,0,0,182,183,5,54,0,0,183,197,5,51,0,0,184,185,
        5,54,0,0,185,197,5,52,0,0,186,187,5,54,0,0,187,197,5,53,0,0,188,
        189,5,54,0,0,189,197,5,54,0,0,190,191,5,54,0,0,191,197,5,55,0,0,
        192,193,5,54,0,0,193,197,5,56,0,0,194,195,5,54,0,0,195,197,5,57,
        0,0,196,146,1,0,0,0,196,148,1,0,0,0,196,150,1,0,0,0,196,152,1,0,
        0,0,196,154,1,0,0,0,196,156,1,0,0,0,196,158,1,0,0,0,196,160,1,0,
        0,0,196,162,1,0,0,0,196,164,1,0,0,0,196,166,1,0,0,0,196,168,1,0,
        0,0,196,170,1,0,0,0,196,172,1,0,0,0,196,174,1,0,0,0,196,176,1,0,
        0,0,196,178,1,0,0,0,196,180,1,0,0,0,196,182,1,0,0,0,196,184,1,0,
        0,0,196,186,1,0,0,0,196,188,1,0,0,0,196,190,1,0,0,0,196,192,1,0,
        0,0,196,194,1,0,0,0,197,198,1,0,0,0,198,200,5,59,0,0,199,86,1,0,
        0,0,199,87,1,0,0,0,199,142,1,0,0,0,200,28,1,0,0,0,201,203,7,1,0,
        0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,
        0,205,30,1,0,0,0,206,208,7,2,0,0,207,206,1,0,0,0,208,211,1,0,0,0,
        209,207,1,0,0,0,209,210,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,
        212,214,7,3,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,
        215,216,1,0,0,0,216,220,1,0,0,0,217,219,7,2,0,0,218,217,1,0,0,0,
        219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,258,1,0,0,0,
        222,220,1,0,0,0,223,225,7,2,0,0,224,223,1,0,0,0,225,228,1,0,0,0,
        226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,
        229,230,5,60,0,0,230,231,5,66,0,0,231,232,5,82,0,0,232,233,5,62,
        0,0,233,237,1,0,0,0,234,236,7,2,0,0,235,234,1,0,0,0,236,239,1,0,
        0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,258,1,0,0,0,239,237,1,0,
        0,0,240,242,7,2,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,
        0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,247,5,60,
        0,0,247,248,5,98,0,0,248,249,5,114,0,0,249,250,5,62,0,0,250,254,
        1,0,0,0,251,253,7,2,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,
        1,0,0,0,254,255,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,257,209,
        1,0,0,0,257,226,1,0,0,0,257,243,1,0,0,0,258,32,1,0,0,0,259,260,7,
        4,0,0,260,34,1,0,0,0,261,263,7,5,0,0,262,261,1,0,0,0,263,264,1,0,
        0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,36,1,0,0,0,266,267,5,38,
        0,0,267,268,5,35,0,0,268,269,5,49,0,0,269,270,5,50,0,0,270,271,5,
        50,0,0,271,272,5,57,0,0,272,273,5,54,0,0,273,276,5,59,0,0,274,276,
        5,60,0,0,275,266,1,0,0,0,275,274,1,0,0,0,276,38,1,0,0,0,277,278,
        5,38,0,0,278,279,5,35,0,0,279,280,5,49,0,0,280,281,5,50,0,0,281,
        282,5,50,0,0,282,283,5,57,0,0,283,284,5,55,0,0,284,287,5,59,0,0,
        285,287,5,62,0,0,286,277,1,0,0,0,286,285,1,0,0,0,287,40,1,0,0,0,
        288,289,3,37,18,0,289,290,5,58,0,0,290,291,5,118,0,0,291,292,5,97,
        0,0,292,293,5,99,0,0,293,294,5,97,0,0,294,295,5,116,0,0,295,296,
        1,0,0,0,296,297,3,39,19,0,297,42,1,0,0,0,298,299,3,37,18,0,299,300,
        5,58,0,0,300,301,5,105,0,0,301,302,5,97,0,0,302,303,5,110,0,0,303,
        304,5,117,0,0,304,305,5,97,0,0,305,306,1,0,0,0,306,307,3,39,19,0,
        307,44,1,0,0,0,16,0,139,196,199,204,209,215,220,226,237,243,254,
        257,264,275,286,0
    ]

class EDRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    L_PAREN = 1
    R_PAREN = 2
    L_BRACKET = 3
    R_BRACKET = 4
    L_CURLY = 5
    R_CURLY = 6
    COLON = 7
    QUESTION = 8
    DASH = 9
    PLUS = 10
    UNDERLINE = 11
    CIRCUMFLEX = 12
    DOT = 13
    LETTER = 14
    SPACE = 15
    NEWLINE = 16
    PUNCT = 17
    NUM = 18
    L_ANGLE = 19
    R_ANGLE = 20
    VACAT = 21
    IANUA = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'{'", "'}'", "':'", "'?'", "'-'", 
            "'+'", "'&#818;'", "'&#770;'", "'&#803;'" ]

    symbolicNames = [ "<INVALID>",
            "L_PAREN", "R_PAREN", "L_BRACKET", "R_BRACKET", "L_CURLY", "R_CURLY", 
            "COLON", "QUESTION", "DASH", "PLUS", "UNDERLINE", "CIRCUMFLEX", 
            "DOT", "LETTER", "SPACE", "NEWLINE", "PUNCT", "NUM", "L_ANGLE", 
            "R_ANGLE", "VACAT", "IANUA" ]

    ruleNames = [ "L_PAREN", "R_PAREN", "L_BRACKET", "R_BRACKET", "L_CURLY", 
                  "R_CURLY", "COLON", "QUESTION", "DASH", "PLUS", "UNDERLINE", 
                  "CIRCUMFLEX", "DOT", "LETTER", "SPACE", "NEWLINE", "PUNCT", 
                  "NUM", "L_ANGLE", "R_ANGLE", "VACAT", "IANUA" ]

    grammarFileName = "EDR.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


