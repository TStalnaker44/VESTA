# Generated from EDR.g by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,239,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,130,8,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,187,8,13,1,13,3,13,190,8,13,1,14,4,14,193,8,14,11,14,12,14,
        194,1,15,4,15,198,8,15,11,15,12,15,199,1,15,5,15,203,8,15,10,15,
        12,15,206,9,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,214,8,15,10,15,
        12,15,217,9,15,1,15,5,15,220,8,15,10,15,12,15,223,9,15,1,15,1,15,
        1,15,1,15,1,15,1,15,5,15,231,8,15,10,15,12,15,234,9,15,3,15,236,
        8,15,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,5,2,0,65,90,97,
        122,2,0,9,9,32,32,2,0,10,10,13,13,1,0,32,32,2,0,44,44,46,46,295,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,41,
        1,0,0,0,9,43,1,0,0,0,11,45,1,0,0,0,13,47,1,0,0,0,15,49,1,0,0,0,17,
        51,1,0,0,0,19,53,1,0,0,0,21,55,1,0,0,0,23,62,1,0,0,0,25,69,1,0,0,
        0,27,189,1,0,0,0,29,192,1,0,0,0,31,235,1,0,0,0,33,237,1,0,0,0,35,
        36,5,40,0,0,36,2,1,0,0,0,37,38,5,41,0,0,38,4,1,0,0,0,39,40,5,91,
        0,0,40,6,1,0,0,0,41,42,5,93,0,0,42,8,1,0,0,0,43,44,5,123,0,0,44,
        10,1,0,0,0,45,46,5,125,0,0,46,12,1,0,0,0,47,48,5,58,0,0,48,14,1,
        0,0,0,49,50,5,63,0,0,50,16,1,0,0,0,51,52,5,45,0,0,52,18,1,0,0,0,
        53,54,5,43,0,0,54,20,1,0,0,0,55,56,5,38,0,0,56,57,5,35,0,0,57,58,
        5,56,0,0,58,59,5,49,0,0,59,60,5,56,0,0,60,61,5,59,0,0,61,22,1,0,
        0,0,62,63,5,38,0,0,63,64,5,35,0,0,64,65,5,55,0,0,65,66,5,55,0,0,
        66,67,5,48,0,0,67,68,5,59,0,0,68,24,1,0,0,0,69,70,5,38,0,0,70,71,
        5,35,0,0,71,72,5,56,0,0,72,73,5,48,0,0,73,74,5,51,0,0,74,75,5,59,
        0,0,75,26,1,0,0,0,76,190,7,0,0,0,77,78,5,38,0,0,78,79,5,35,0,0,79,
        80,5,57,0,0,80,129,1,0,0,0,81,82,5,49,0,0,82,130,5,51,0,0,83,84,
        5,49,0,0,84,130,5,52,0,0,85,86,5,49,0,0,86,130,5,53,0,0,87,88,5,
        49,0,0,88,130,5,54,0,0,89,90,5,49,0,0,90,130,5,55,0,0,91,92,5,49,
        0,0,92,130,5,56,0,0,93,94,5,49,0,0,94,130,5,57,0,0,95,96,5,50,0,
        0,96,130,5,48,0,0,97,98,5,50,0,0,98,130,5,49,0,0,99,100,5,50,0,0,
        100,130,5,50,0,0,101,102,5,50,0,0,102,130,5,51,0,0,103,104,5,50,
        0,0,104,130,5,52,0,0,105,106,5,50,0,0,106,130,5,53,0,0,107,108,5,
        50,0,0,108,130,5,54,0,0,109,110,5,50,0,0,110,130,5,55,0,0,111,112,
        5,50,0,0,112,130,5,56,0,0,113,114,5,50,0,0,114,130,5,57,0,0,115,
        116,5,51,0,0,116,130,5,49,0,0,117,118,5,51,0,0,118,130,5,50,0,0,
        119,120,5,51,0,0,120,130,5,51,0,0,121,122,5,51,0,0,122,130,5,52,
        0,0,123,124,5,51,0,0,124,130,5,53,0,0,125,126,5,51,0,0,126,130,5,
        54,0,0,127,128,5,51,0,0,128,130,5,55,0,0,129,81,1,0,0,0,129,83,1,
        0,0,0,129,85,1,0,0,0,129,87,1,0,0,0,129,89,1,0,0,0,129,91,1,0,0,
        0,129,93,1,0,0,0,129,95,1,0,0,0,129,97,1,0,0,0,129,99,1,0,0,0,129,
        101,1,0,0,0,129,103,1,0,0,0,129,105,1,0,0,0,129,107,1,0,0,0,129,
        109,1,0,0,0,129,111,1,0,0,0,129,113,1,0,0,0,129,115,1,0,0,0,129,
        117,1,0,0,0,129,119,1,0,0,0,129,121,1,0,0,0,129,123,1,0,0,0,129,
        125,1,0,0,0,129,127,1,0,0,0,130,131,1,0,0,0,131,190,5,59,0,0,132,
        133,5,38,0,0,133,134,5,35,0,0,134,135,5,57,0,0,135,186,1,0,0,0,136,
        137,5,52,0,0,137,187,5,53,0,0,138,139,5,52,0,0,139,187,5,54,0,0,
        140,141,5,52,0,0,141,187,5,55,0,0,142,143,5,52,0,0,143,187,5,56,
        0,0,144,145,5,52,0,0,145,187,5,57,0,0,146,147,5,53,0,0,147,187,5,
        48,0,0,148,149,5,53,0,0,149,187,5,49,0,0,150,151,5,53,0,0,151,187,
        5,50,0,0,152,153,5,53,0,0,153,187,5,51,0,0,154,155,5,53,0,0,155,
        187,5,52,0,0,156,157,5,53,0,0,157,187,5,53,0,0,158,159,5,53,0,0,
        159,187,5,54,0,0,160,161,5,53,0,0,161,187,5,55,0,0,162,163,5,53,
        0,0,163,187,5,56,0,0,164,165,5,53,0,0,165,187,5,57,0,0,166,167,5,
        54,0,0,167,187,5,48,0,0,168,169,5,54,0,0,169,187,5,49,0,0,170,171,
        5,54,0,0,171,187,5,50,0,0,172,173,5,54,0,0,173,187,5,51,0,0,174,
        175,5,54,0,0,175,187,5,52,0,0,176,177,5,54,0,0,177,187,5,53,0,0,
        178,179,5,54,0,0,179,187,5,54,0,0,180,181,5,54,0,0,181,187,5,55,
        0,0,182,183,5,54,0,0,183,187,5,56,0,0,184,185,5,54,0,0,185,187,5,
        57,0,0,186,136,1,0,0,0,186,138,1,0,0,0,186,140,1,0,0,0,186,142,1,
        0,0,0,186,144,1,0,0,0,186,146,1,0,0,0,186,148,1,0,0,0,186,150,1,
        0,0,0,186,152,1,0,0,0,186,154,1,0,0,0,186,156,1,0,0,0,186,158,1,
        0,0,0,186,160,1,0,0,0,186,162,1,0,0,0,186,164,1,0,0,0,186,166,1,
        0,0,0,186,168,1,0,0,0,186,170,1,0,0,0,186,172,1,0,0,0,186,174,1,
        0,0,0,186,176,1,0,0,0,186,178,1,0,0,0,186,180,1,0,0,0,186,182,1,
        0,0,0,186,184,1,0,0,0,187,188,1,0,0,0,188,190,5,59,0,0,189,76,1,
        0,0,0,189,77,1,0,0,0,189,132,1,0,0,0,190,28,1,0,0,0,191,193,7,1,
        0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,
        0,0,195,30,1,0,0,0,196,198,7,2,0,0,197,196,1,0,0,0,198,199,1,0,0,
        0,199,197,1,0,0,0,199,200,1,0,0,0,200,236,1,0,0,0,201,203,7,3,0,
        0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,
        0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,60,0,0,208,209,5,66,
        0,0,209,210,5,82,0,0,210,211,5,62,0,0,211,215,1,0,0,0,212,214,7,
        3,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,
        0,0,0,216,236,1,0,0,0,217,215,1,0,0,0,218,220,7,3,0,0,219,218,1,
        0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,1,
        0,0,0,223,221,1,0,0,0,224,225,5,60,0,0,225,226,5,98,0,0,226,227,
        5,114,0,0,227,228,5,62,0,0,228,232,1,0,0,0,229,231,7,3,0,0,230,229,
        1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,236,
        1,0,0,0,234,232,1,0,0,0,235,197,1,0,0,0,235,204,1,0,0,0,235,221,
        1,0,0,0,236,32,1,0,0,0,237,238,7,4,0,0,238,34,1,0,0,0,11,0,129,186,
        189,194,199,204,215,221,232,235,0
    ]

class EDRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    L_PAREN = 1
    R_PAREN = 2
    L_BRACKET = 3
    R_BRACKET = 4
    L_CURLY = 5
    R_CURLY = 6
    COLON = 7
    QUESTION = 8
    DASH = 9
    PLUS = 10
    UNDERLINE = 11
    CIRCUMFLEX = 12
    DOT = 13
    LETTER = 14
    SPACE = 15
    NEWLINE = 16
    PUNCT = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'{'", "'}'", "':'", "'?'", "'-'", 
            "'+'", "'&#818;'", "'&#770;'", "'&#803;'" ]

    symbolicNames = [ "<INVALID>",
            "L_PAREN", "R_PAREN", "L_BRACKET", "R_BRACKET", "L_CURLY", "R_CURLY", 
            "COLON", "QUESTION", "DASH", "PLUS", "UNDERLINE", "CIRCUMFLEX", 
            "DOT", "LETTER", "SPACE", "NEWLINE", "PUNCT" ]

    ruleNames = [ "L_PAREN", "R_PAREN", "L_BRACKET", "R_BRACKET", "L_CURLY", 
                  "R_CURLY", "COLON", "QUESTION", "DASH", "PLUS", "UNDERLINE", 
                  "CIRCUMFLEX", "DOT", "LETTER", "SPACE", "NEWLINE", "PUNCT" ]

    grammarFileName = "EDR.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


